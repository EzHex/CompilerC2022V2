//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\modes\OneDrive\Stalinis kompiuteris\Compulerv2\CompilerC2022V2\Solution1\ConsoleApp1\Content\c2022v2.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApp1.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class c2022v2Parser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, PRINT=41, BIND=42, TYPE=43, INTEGER=44, DOUBLE=45, 
		CHAR=46, BOOL=47, NULL=48, IDENTIFIER=49, COMMENT=50, WS=51;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_mainBlock = 2, RULE_funcDeclaration = 3, 
		RULE_statement = 4, RULE_mathAssignment = 5, RULE_assignment = 6, RULE_arrayAssignment = 7, 
		RULE_unaryOperation = 8, RULE_funCall = 9, RULE_bindCall = 10, RULE_printCall = 11, 
		RULE_ifBlock = 12, RULE_elseifBlock = 13, RULE_elseBlock = 14, RULE_forBlock = 15, 
		RULE_whileBlock = 16, RULE_block = 17, RULE_expression = 18, RULE_numericAss = 19, 
		RULE_numericMultiOp = 20, RULE_numericAddOp = 21, RULE_unaryOp = 22, RULE_booleanBinaryOp = 23, 
		RULE_comp = 24, RULE_constant = 25;
	public static readonly string[] ruleNames = {
		"program", "line", "mainBlock", "funcDeclaration", "statement", "mathAssignment", 
		"assignment", "arrayAssignment", "unaryOperation", "funCall", "bindCall", 
		"printCall", "ifBlock", "elseifBlock", "elseBlock", "forBlock", "whileBlock", 
		"block", "expression", "numericAss", "numericMultiOp", "numericAddOp", 
		"unaryOp", "booleanBinaryOp", "comp", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'main:'", "'endmain;'", "'fun'", "'endfun'", "';'", "'='", "'['", 
		"']'", "'('", "','", "')'", "'if'", "'ifend'", "'elseif'", "'else'", "'for'", 
		"'forend'", "'while'", "'whileend'", "'!'", "'*='", "'/='", "'%='", "'+='", 
		"'-='", "'*'", "'/'", "'%'", "'+'", "'-'", "'++'", "'--'", "'||'", "'&&'", 
		"'=='", "'!='", "'>'", "'<'", "'<='", "'>='", "'print'", null, null, null, 
		null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "PRINT", "BIND", "TYPE", "INTEGER", "DOUBLE", 
		"CHAR", "BOOL", "NULL", "IDENTIFIER", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "c2022v2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public c2022v2Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(c2022v2Parser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(T__0);
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__11) | (1L << T__15) | (1L << T__17) | (1L << PRINT) | (1L << BIND) | (1L << TYPE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 53; line();
				}
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 59; Match(T__1);
			State = 60; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public MainBlockContext mainBlock() {
			return GetRuleContext<MainBlockContext>(0);
		}
		public FuncDeclarationContext funcDeclaration() {
			return GetRuleContext<FuncDeclarationContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__11:
			case T__15:
			case T__17:
			case PRINT:
			case BIND:
			case TYPE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; mainBlock();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; funcDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FunCallContext funCall() {
			return GetRuleContext<FunCallContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ForBlockContext forBlock() {
			return GetRuleContext<ForBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public MainBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterMainBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitMainBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMainBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainBlockContext mainBlock() {
		MainBlockContext _localctx = new MainBlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_mainBlock);
		try {
			State = 71;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; funCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; ifBlock();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; forBlock();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70; whileBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterFuncDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitFuncDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_funcDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(T__2);
			State = 74; Match(IDENTIFIER);
			State = 78;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << BIND) | (1L << TYPE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 75; statement();
				}
				}
				State = 80;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 81; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public MathAssignmentContext mathAssignment() {
			return GetRuleContext<MathAssignmentContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		public FunCallContext funCall() {
			return GetRuleContext<FunCallContext>(0);
		}
		public PrintCallContext printCall() {
			return GetRuleContext<PrintCallContext>(0);
		}
		public BindCallContext bindCall() {
			return GetRuleContext<BindCallContext>(0);
		}
		public UnaryOperationContext unaryOperation() {
			return GetRuleContext<UnaryOperationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 83; mathAssignment();
				}
				break;

			case 2:
				{
				State = 84; assignment();
				}
				break;

			case 3:
				{
				State = 85; arrayAssignment();
				}
				break;

			case 4:
				{
				State = 86; funCall();
				}
				break;

			case 5:
				{
				State = 87; printCall();
				}
				break;

			case 6:
				{
				State = 88; bindCall();
				}
				break;

			case 7:
				{
				State = 89; unaryOperation();
				}
				break;
			}
			State = 92; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathAssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NumericAssContext numericAss() {
			return GetRuleContext<NumericAssContext>(0);
		}
		public MathAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterMathAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitMathAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathAssignmentContext mathAssignment() {
		MathAssignmentContext _localctx = new MathAssignmentContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_mathAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(IDENTIFIER);
			{
			State = 95; numericAss();
			}
			State = 96; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(c2022v2Parser.TYPE, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TYPE) {
				{
				State = 98; Match(TYPE);
				}
			}

			State = 101; Match(IDENTIFIER);
			State = 102; Match(T__5);
			State = 103; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(c2022v2Parser.TYPE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_arrayAssignment);
		try {
			State = 118;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 105; Match(TYPE);
				State = 106; Match(IDENTIFIER);
				State = 107; Match(T__6);
				State = 108; expression(0);
				State = 109; Match(T__7);
				}
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 111; Match(IDENTIFIER);
				State = 112; Match(T__6);
				{
				State = 113; expression(0);
				}
				State = 114; Match(T__7);
				State = 115; Match(T__5);
				State = 116; expression(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public UnaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterUnaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitUnaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperationContext unaryOperation() {
		UnaryOperationContext _localctx = new UnaryOperationContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_unaryOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(IDENTIFIER);
			State = 121; unaryOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunCallContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(c2022v2Parser.TYPE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterFunCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitFunCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunCallContext funCall() {
		FunCallContext _localctx = new FunCallContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_funCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(TYPE);
			State = 124; Match(IDENTIFIER);
			State = 125; Match(T__8);
			State = 134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__19) | (1L << TYPE) | (1L << INTEGER) | (1L << DOUBLE) | (1L << CHAR) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 126; expression(0);
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__9) {
					{
					{
					State = 127; Match(T__9);
					State = 128; expression(0);
					}
					}
					State = 133;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 136; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindCallContext : ParserRuleContext {
		public ITerminalNode BIND() { return GetToken(c2022v2Parser.BIND, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(c2022v2Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(c2022v2Parser.IDENTIFIER, i);
		}
		public BindCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterBindCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitBindCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindCallContext bindCall() {
		BindCallContext _localctx = new BindCallContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_bindCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(BIND);
			State = 139; Match(T__8);
			State = 140; Match(IDENTIFIER);
			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 141; Match(T__9);
				State = 142; Match(IDENTIFIER);
				}
				}
				State = 145;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__9 );
			State = 147; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintCallContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(c2022v2Parser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterPrintCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitPrintCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintCallContext printCall() {
		PrintCallContext _localctx = new PrintCallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_printCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(PRINT);
			State = 150; Match(T__8);
			State = 151; expression(0);
			State = 152; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext[] elseifBlock() {
			return GetRuleContexts<ElseifBlockContext>();
		}
		public ElseifBlockContext elseifBlock(int i) {
			return GetRuleContext<ElseifBlockContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(T__11);
			State = 155; Match(T__8);
			State = 156; expression(0);
			State = 157; Match(T__10);
			State = 158; block();
			State = 162;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 159; elseifBlock();
				}
				}
				State = 164;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__14) {
				{
				State = 165; elseBlock();
				}
			}

			State = 168; Match(T__12);
			State = 169; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterElseifBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitElseifBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifBlockContext elseifBlock() {
		ElseifBlockContext _localctx = new ElseifBlockContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_elseifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(T__13);
			State = 172; Match(T__8);
			State = 173; expression(0);
			State = 174; Match(T__10);
			State = 175; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(T__14);
			State = 178; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterForBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitForBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_forBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(T__15);
			State = 181; Match(T__8);
			State = 182; assignment();
			State = 183; Match(T__4);
			State = 184; expression(0);
			State = 185; Match(T__4);
			State = 186; expression(0);
			State = 187; Match(T__10);
			State = 188; block();
			State = 189; Match(T__16);
			State = 190; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(T__17);
			State = 193; expression(0);
			State = 194; block();
			State = 195; Match(T__18);
			State = 196; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 198; line();
				}
				}
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__11) | (1L << T__15) | (1L << T__17) | (1L << PRINT) | (1L << BIND) | (1L << TYPE) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOpExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public UnaryOpExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterUnaryOpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitUnaryOpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayExpContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(c2022v2Parser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterArrayExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitArrayExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunCallContext funCall() {
			return GetRuleContext<FunCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesesExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesesExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterParenthesesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitParenthesesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanUnaryExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanUnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterBooleanUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitBooleanUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanBinaryOpExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BooleanBinaryOpContext booleanBinaryOp() {
			return GetRuleContext<BooleanBinaryOpContext>(0);
		}
		public BooleanBinaryOpExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterBooleanBinaryOpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitBooleanBinaryOpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanBinaryOpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericMultiOpExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumericMultiOpContext numericMultiOp() {
			return GetRuleContext<NumericMultiOpContext>(0);
		}
		public NumericMultiOpExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterNumericMultiOpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitNumericMultiOpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericMultiOpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAddOpExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public NumericAddOpContext numericAddOp() {
			return GetRuleContext<NumericAddOpContext>(0);
		}
		public NumericAddOpExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterNumericAddOpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitNumericAddOpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAddOpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanCompareExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		public BooleanCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterBooleanCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitBooleanCompareExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 204; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 205; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new UnaryOpExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 206; Match(IDENTIFIER);
				State = 207; unaryOp();
				}
				break;

			case 4:
				{
				_localctx = new ArrayExpContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 208; Match(IDENTIFIER);
				State = 209; Match(T__6);
				{
				State = 210; expression(0);
				}
				State = 211; Match(T__7);
				}
				break;

			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 213; funCall();
				}
				break;

			case 6:
				{
				_localctx = new ParenthesesExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 214; Match(T__8);
				State = 215; expression(0);
				State = 216; Match(T__10);
				}
				break;

			case 7:
				{
				_localctx = new BooleanUnaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 218; Match(T__19);
				State = 219; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 240;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						_localctx = new BooleanBinaryOpExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 223; booleanBinaryOp();
						State = 224; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new NumericMultiOpExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 226;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 227; numericMultiOp();
						State = 228; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new NumericAddOpExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 230;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 231; numericAddOp();
						State = 232; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BooleanCompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 235; comp();
						State = 236; expression(2);
						}
						break;
					}
					} 
				}
				State = 242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumericAssContext : ParserRuleContext {
		public NumericAssContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAss; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterNumericAss(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitNumericAss(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAss(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericAssContext numericAss() {
		NumericAssContext _localctx = new NumericAssContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_numericAss);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericMultiOpContext : ParserRuleContext {
		public NumericMultiOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericMultiOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterNumericMultiOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitNumericMultiOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericMultiOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericMultiOpContext numericMultiOp() {
		NumericMultiOpContext _localctx = new NumericMultiOpContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_numericMultiOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << T__27))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAddOpContext : ParserRuleContext {
		public NumericAddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAddOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterNumericAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitNumericAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericAddOpContext numericAddOp() {
		NumericAddOpContext _localctx = new NumericAddOpContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_numericAddOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = _input.La(1);
			if ( !(_la==T__28 || _la==T__29) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = _input.La(1);
			if ( !(_la==T__30 || _la==T__31) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanBinaryOpContext : ParserRuleContext {
		public BooleanBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterBooleanBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitBooleanBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanBinaryOpContext booleanBinaryOp() {
		BooleanBinaryOpContext _localctx = new BooleanBinaryOpContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_booleanBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			_la = _input.La(1);
			if ( !(_la==T__32 || _la==T__33) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_comp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(c2022v2Parser.INTEGER, 0); }
		public ITerminalNode DOUBLE() { return GetToken(c2022v2Parser.DOUBLE, 0); }
		public ITerminalNode CHAR() { return GetToken(c2022v2Parser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(c2022v2Parser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(c2022v2Parser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Ic2022v2Listener typedListener = listener as Ic2022v2Listener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Ic2022v2Visitor<TResult> typedVisitor = visitor as Ic2022v2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << DOUBLE) | (1L << CHAR) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35\x104\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\x3\x2\a\x2\x39\n\x2\f\x2\xE\x2<\v\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x5\x3\x43\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4J\n\x4\x3"+
		"\x5\x3\x5\x3\x5\a\x5O\n\x5\f\x5\xE\x5R\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6]\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x5\b\x66\n\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\ty\n\t\x3\n\x3\n\x3\n\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\a\v\x84\n\v\f\v\xE\v\x87\v\v\x5\v\x89\n\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\f\x6\f\x92\n\f\r\f\xE\f\x93\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xA3\n\xE\f"+
		"\xE\xE\xE\xA6\v\xE\x3\xE\x5\xE\xA9\n\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x6\x13\xCA\n\x13\r\x13\xE\x13"+
		"\xCB\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\xDF\n\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xF1\n\x14\f\x14\xE\x14"+
		"\xF4\v\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x2\x2\x3&\x1C\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2"+
		"\x2\t\x3\x2\x17\x1B\x3\x2\x1C\x1E\x3\x2\x1F \x3\x2!\"\x3\x2#$\x3\x2%*"+
		"\x3\x2.\x32\x108\x2\x36\x3\x2\x2\x2\x4\x42\x3\x2\x2\x2\x6I\x3\x2\x2\x2"+
		"\bK\x3\x2\x2\x2\n\\\x3\x2\x2\x2\f`\x3\x2\x2\x2\xE\x65\x3\x2\x2\x2\x10"+
		"x\x3\x2\x2\x2\x12z\x3\x2\x2\x2\x14}\x3\x2\x2\x2\x16\x8C\x3\x2\x2\x2\x18"+
		"\x97\x3\x2\x2\x2\x1A\x9C\x3\x2\x2\x2\x1C\xAD\x3\x2\x2\x2\x1E\xB3\x3\x2"+
		"\x2\x2 \xB6\x3\x2\x2\x2\"\xC2\x3\x2\x2\x2$\xC9\x3\x2\x2\x2&\xDE\x3\x2"+
		"\x2\x2(\xF5\x3\x2\x2\x2*\xF7\x3\x2\x2\x2,\xF9\x3\x2\x2\x2.\xFB\x3\x2\x2"+
		"\x2\x30\xFD\x3\x2\x2\x2\x32\xFF\x3\x2\x2\x2\x34\x101\x3\x2\x2\x2\x36:"+
		"\a\x3\x2\x2\x37\x39\x5\x4\x3\x2\x38\x37\x3\x2\x2\x2\x39<\x3\x2\x2\x2:"+
		"\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;=\x3\x2\x2\x2<:\x3\x2\x2\x2=>\a\x4\x2\x2"+
		">?\a\x2\x2\x3?\x3\x3\x2\x2\x2@\x43\x5\x6\x4\x2\x41\x43\x5\b\x5\x2\x42"+
		"@\x3\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43\x5\x3\x2\x2\x2\x44J\x5\n\x6\x2\x45"+
		"J\x5\x14\v\x2\x46J\x5\x1A\xE\x2GJ\x5 \x11\x2HJ\x5\"\x12\x2I\x44\x3\x2"+
		"\x2\x2I\x45\x3\x2\x2\x2I\x46\x3\x2\x2\x2IG\x3\x2\x2\x2IH\x3\x2\x2\x2J"+
		"\a\x3\x2\x2\x2KL\a\x5\x2\x2LP\a\x33\x2\x2MO\x5\n\x6\x2NM\x3\x2\x2\x2O"+
		"R\x3\x2\x2\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2QS\x3\x2\x2\x2RP\x3\x2\x2\x2"+
		"ST\a\x6\x2\x2T\t\x3\x2\x2\x2U]\x5\f\a\x2V]\x5\xE\b\x2W]\x5\x10\t\x2X]"+
		"\x5\x14\v\x2Y]\x5\x18\r\x2Z]\x5\x16\f\x2[]\x5\x12\n\x2\\U\x3\x2\x2\x2"+
		"\\V\x3\x2\x2\x2\\W\x3\x2\x2\x2\\X\x3\x2\x2\x2\\Y\x3\x2\x2\x2\\Z\x3\x2"+
		"\x2\x2\\[\x3\x2\x2\x2]^\x3\x2\x2\x2^_\a\a\x2\x2_\v\x3\x2\x2\x2`\x61\a"+
		"\x33\x2\x2\x61\x62\x5(\x15\x2\x62\x63\x5&\x14\x2\x63\r\x3\x2\x2\x2\x64"+
		"\x66\a-\x2\x2\x65\x64\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\x3\x2\x2\x2"+
		"gh\a\x33\x2\x2hi\a\b\x2\x2ij\x5&\x14\x2j\xF\x3\x2\x2\x2kl\a-\x2\x2lm\a"+
		"\x33\x2\x2mn\a\t\x2\x2no\x5&\x14\x2op\a\n\x2\x2py\x3\x2\x2\x2qr\a\x33"+
		"\x2\x2rs\a\t\x2\x2st\x5&\x14\x2tu\a\n\x2\x2uv\a\b\x2\x2vw\x5&\x14\x2w"+
		"y\x3\x2\x2\x2xk\x3\x2\x2\x2xq\x3\x2\x2\x2y\x11\x3\x2\x2\x2z{\a\x33\x2"+
		"\x2{|\x5.\x18\x2|\x13\x3\x2\x2\x2}~\a-\x2\x2~\x7F\a\x33\x2\x2\x7F\x88"+
		"\a\v\x2\x2\x80\x85\x5&\x14\x2\x81\x82\a\f\x2\x2\x82\x84\x5&\x14\x2\x83"+
		"\x81\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2"+
		"\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x80\x3\x2\x2\x2\x88"+
		"\x89\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\a\r\x2\x2\x8B\x15\x3\x2\x2"+
		"\x2\x8C\x8D\a,\x2\x2\x8D\x8E\a\v\x2\x2\x8E\x91\a\x33\x2\x2\x8F\x90\a\f"+
		"\x2\x2\x90\x92\a\x33\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93"+
		"\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\a\r\x2"+
		"\x2\x96\x17\x3\x2\x2\x2\x97\x98\a+\x2\x2\x98\x99\a\v\x2\x2\x99\x9A\x5"+
		"&\x14\x2\x9A\x9B\a\r\x2\x2\x9B\x19\x3\x2\x2\x2\x9C\x9D\a\xE\x2\x2\x9D"+
		"\x9E\a\v\x2\x2\x9E\x9F\x5&\x14\x2\x9F\xA0\a\r\x2\x2\xA0\xA4\x5$\x13\x2"+
		"\xA1\xA3\x5\x1C\xF\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA6\x3\x2\x2\x2\xA4\xA2"+
		"\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2"+
		"\x2\xA7\xA9\x5\x1E\x10\x2\xA8\xA7\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9"+
		"\xAA\x3\x2\x2\x2\xAA\xAB\a\xF\x2\x2\xAB\xAC\a\a\x2\x2\xAC\x1B\x3\x2\x2"+
		"\x2\xAD\xAE\a\x10\x2\x2\xAE\xAF\a\v\x2\x2\xAF\xB0\x5&\x14\x2\xB0\xB1\a"+
		"\r\x2\x2\xB1\xB2\x5$\x13\x2\xB2\x1D\x3\x2\x2\x2\xB3\xB4\a\x11\x2\x2\xB4"+
		"\xB5\x5$\x13\x2\xB5\x1F\x3\x2\x2\x2\xB6\xB7\a\x12\x2\x2\xB7\xB8\a\v\x2"+
		"\x2\xB8\xB9\x5\xE\b\x2\xB9\xBA\a\a\x2\x2\xBA\xBB\x5&\x14\x2\xBB\xBC\a"+
		"\a\x2\x2\xBC\xBD\x5&\x14\x2\xBD\xBE\a\r\x2\x2\xBE\xBF\x5$\x13\x2\xBF\xC0"+
		"\a\x13\x2\x2\xC0\xC1\a\a\x2\x2\xC1!\x3\x2\x2\x2\xC2\xC3\a\x14\x2\x2\xC3"+
		"\xC4\x5&\x14\x2\xC4\xC5\x5$\x13\x2\xC5\xC6\a\x15\x2\x2\xC6\xC7\a\a\x2"+
		"\x2\xC7#\x3\x2\x2\x2\xC8\xCA\x5\x4\x3\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCB\x3"+
		"\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC%\x3\x2\x2\x2\xCD"+
		"\xCE\b\x14\x1\x2\xCE\xDF\x5\x34\x1B\x2\xCF\xDF\a\x33\x2\x2\xD0\xD1\a\x33"+
		"\x2\x2\xD1\xDF\x5.\x18\x2\xD2\xD3\a\x33\x2\x2\xD3\xD4\a\t\x2\x2\xD4\xD5"+
		"\x5&\x14\x2\xD5\xD6\a\n\x2\x2\xD6\xDF\x3\x2\x2\x2\xD7\xDF\x5\x14\v\x2"+
		"\xD8\xD9\a\v\x2\x2\xD9\xDA\x5&\x14\x2\xDA\xDB\a\r\x2\x2\xDB\xDF\x3\x2"+
		"\x2\x2\xDC\xDD\a\x16\x2\x2\xDD\xDF\x5&\x14\a\xDE\xCD\x3\x2\x2\x2\xDE\xCF"+
		"\x3\x2\x2\x2\xDE\xD0\x3\x2\x2\x2\xDE\xD2\x3\x2\x2\x2\xDE\xD7\x3\x2\x2"+
		"\x2\xDE\xD8\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xF2\x3\x2\x2\x2\xE0\xE1"+
		"\f\x6\x2\x2\xE1\xE2\x5\x30\x19\x2\xE2\xE3\x5&\x14\a\xE3\xF1\x3\x2\x2\x2"+
		"\xE4\xE5\f\x5\x2\x2\xE5\xE6\x5*\x16\x2\xE6\xE7\x5&\x14\x6\xE7\xF1\x3\x2"+
		"\x2\x2\xE8\xE9\f\x4\x2\x2\xE9\xEA\x5,\x17\x2\xEA\xEB\x5&\x14\x5\xEB\xF1"+
		"\x3\x2\x2\x2\xEC\xED\f\x3\x2\x2\xED\xEE\x5\x32\x1A\x2\xEE\xEF\x5&\x14"+
		"\x4\xEF\xF1\x3\x2\x2\x2\xF0\xE0\x3\x2\x2\x2\xF0\xE4\x3\x2\x2\x2\xF0\xE8"+
		"\x3\x2\x2\x2\xF0\xEC\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2"+
		"\x2\xF2\xF3\x3\x2\x2\x2\xF3\'\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6"+
		"\t\x2\x2\x2\xF6)\x3\x2\x2\x2\xF7\xF8\t\x3\x2\x2\xF8+\x3\x2\x2\x2\xF9\xFA"+
		"\t\x4\x2\x2\xFA-\x3\x2\x2\x2\xFB\xFC\t\x5\x2\x2\xFC/\x3\x2\x2\x2\xFD\xFE"+
		"\t\x6\x2\x2\xFE\x31\x3\x2\x2\x2\xFF\x100\t\a\x2\x2\x100\x33\x3\x2\x2\x2"+
		"\x101\x102\t\b\x2\x2\x102\x35\x3\x2\x2\x2\x12:\x42IP\\\x65x\x85\x88\x93"+
		"\xA4\xA8\xCB\xDE\xF0\xF2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApp1.Content
