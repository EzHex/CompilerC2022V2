//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\KTUOneDrive\OneDrive - Kaunas University of Technology\4pusmetis\Programavimo kalbų teorija\Compiler\CompilerC2022V2\Solution1\ConsoleApp1\Content\c2022v2.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApp1.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class c2022v2Lexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, IDENTIFIER=24, 
		WS=25;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "IDENTIFIER", "WS"
	};


	public c2022v2Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "','", "')'", "'if'", "'ifend'", "'for'", "'forend'", 
		"'while'", "'whileend'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", "'=='", 
		"'!='", "'>'", "'<'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "c2022v2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1B\x8C\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\a\x19\x81\n\x19\f\x19\xE\x19\x84\v\x19\x3\x1A\x6\x1A"+
		"\x87\n\x1A\r\x1A\xE\x1A\x88\x3\x1A\x3\x1A\x2\x2\x2\x1B\x3\x2\x3\x5\x2"+
		"\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x3\x2"+
		"\x5\x5\x2\x43\\\x61\x61\x63|\x5\x2\x32;\x43\\\x63|\x4\x2\v\f\xF\xF\x8D"+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2"+
		"\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3"+
		"\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2"+
		"\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2"+
		"\x2\x33\x3\x2\x2\x2\x3\x35\x3\x2\x2\x2\x5\x37\x3\x2\x2\x2\a\x39\x3\x2"+
		"\x2\x2\t;\x3\x2\x2\x2\v=\x3\x2\x2\x2\r?\x3\x2\x2\x2\xF\x42\x3\x2\x2\x2"+
		"\x11H\x3\x2\x2\x2\x13L\x3\x2\x2\x2\x15S\x3\x2\x2\x2\x17Y\x3\x2\x2\x2\x19"+
		"\x62\x3\x2\x2\x2\x1B\x64\x3\x2\x2\x2\x1D\x66\x3\x2\x2\x2\x1Fh\x3\x2\x2"+
		"\x2!j\x3\x2\x2\x2#l\x3\x2\x2\x2%n\x3\x2\x2\x2\'q\x3\x2\x2\x2)t\x3\x2\x2"+
		"\x2+v\x3\x2\x2\x2-x\x3\x2\x2\x2/{\x3\x2\x2\x2\x31~\x3\x2\x2\x2\x33\x86"+
		"\x3\x2\x2\x2\x35\x36\a=\x2\x2\x36\x4\x3\x2\x2\x2\x37\x38\a?\x2\x2\x38"+
		"\x6\x3\x2\x2\x2\x39:\a*\x2\x2:\b\x3\x2\x2\x2;<\a.\x2\x2<\n\x3\x2\x2\x2"+
		"=>\a+\x2\x2>\f\x3\x2\x2\x2?@\ak\x2\x2@\x41\ah\x2\x2\x41\xE\x3\x2\x2\x2"+
		"\x42\x43\ak\x2\x2\x43\x44\ah\x2\x2\x44\x45\ag\x2\x2\x45\x46\ap\x2\x2\x46"+
		"G\a\x66\x2\x2G\x10\x3\x2\x2\x2HI\ah\x2\x2IJ\aq\x2\x2JK\at\x2\x2K\x12\x3"+
		"\x2\x2\x2LM\ah\x2\x2MN\aq\x2\x2NO\at\x2\x2OP\ag\x2\x2PQ\ap\x2\x2QR\a\x66"+
		"\x2\x2R\x14\x3\x2\x2\x2ST\ay\x2\x2TU\aj\x2\x2UV\ak\x2\x2VW\an\x2\x2WX"+
		"\ag\x2\x2X\x16\x3\x2\x2\x2YZ\ay\x2\x2Z[\aj\x2\x2[\\\ak\x2\x2\\]\an\x2"+
		"\x2]^\ag\x2\x2^_\ag\x2\x2_`\ap\x2\x2`\x61\a\x66\x2\x2\x61\x18\x3\x2\x2"+
		"\x2\x62\x63\a#\x2\x2\x63\x1A\x3\x2\x2\x2\x64\x65\a,\x2\x2\x65\x1C\x3\x2"+
		"\x2\x2\x66g\a\x31\x2\x2g\x1E\x3\x2\x2\x2hi\a\'\x2\x2i \x3\x2\x2\x2jk\a"+
		"-\x2\x2k\"\x3\x2\x2\x2lm\a/\x2\x2m$\x3\x2\x2\x2no\a?\x2\x2op\a?\x2\x2"+
		"p&\x3\x2\x2\x2qr\a#\x2\x2rs\a?\x2\x2s(\x3\x2\x2\x2tu\a@\x2\x2u*\x3\x2"+
		"\x2\x2vw\a>\x2\x2w,\x3\x2\x2\x2xy\a>\x2\x2yz\a?\x2\x2z.\x3\x2\x2\x2{|"+
		"\a@\x2\x2|}\a?\x2\x2}\x30\x3\x2\x2\x2~\x82\t\x2\x2\x2\x7F\x81\t\x3\x2"+
		"\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83"+
		"\x3\x2\x2\x2\x83\x32\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x87\t\x4\x2\x2"+
		"\x86\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2\x88\x89\x3"+
		"\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\b\x1A\x2\x2\x8B\x34\x3\x2\x2\x2"+
		"\x5\x2\x82\x88\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApp1.Content
